<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>lucc&#39;s notes</title>
  <subtitle>路曼曼其修远兮，吾将上下而求索</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://lucc.ml/"/>
  <updated>2016-12-15T14:11:10.303Z</updated>
  <id>http://lucc.ml/</id>
  
  <author>
    <name>陆钏钏</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>写完拼图游戏的小结</title>
    <link href="http://lucc.ml/2016/12/13/%E5%86%99%E5%AE%8C%E6%8B%BC%E5%9B%BE%E6%B8%B8%E6%88%8F%E7%9A%84%E5%B0%8F%E7%BB%93/"/>
    <id>http://lucc.ml/2016/12/13/写完拼图游戏的小结/</id>
    <published>2016-12-13T15:18:02.000Z</published>
    <updated>2016-12-15T14:11:10.303Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>以前一直想写些自己感兴趣的东西玩，一直没动笔，还记得去年也做过小游戏方面的工作，当时基本上都是在网上找现成的改改就OK了，还记得以前想找个移动端的拼图找了好久都没找到，懊悔不已，最近研究了下，写个玩玩。</p>
</blockquote>
<p><a href="http://lucc.ml/demos/move/move.html">demo地址体验</a></p>
<h3 id="PC端的尝试"><a href="#PC端的尝试" class="headerlink" title="PC端的尝试"></a>PC端的尝试</h3><ul>
<li>解决拖拽问题<br>网上搜了下解决方案：<br><strong>思路一</strong>：鼠标在页面上移动时不断获取鼠标位置，并将鼠标的位置信息赋值给随鼠标移动的标签，对标签进行定位；这样鼠标就能进行拖动标签了。<br><strong>思路二</strong>：HTML5新属性，可拖放属性draggable，支持draggable属性的浏览器有IE10+，Firfox4+，Safari5+，Chrome，另外为了让Firfox支持可拖放属性，还必须添加一个ondragstart事件处理程序，并在dataTransfer对象中保存一些信息。</li>
</ul>
<a id="more"></a>
<ul>
<li><p>解决图片切割问题<br>  图片切割本来想就用背景图搞个定位完事，后来想想，还是为难下自己，用过几次canvas，感觉还不错，所以这次用用canvas，具体用到了drawImage这个方法，方法后文贴出</p>
</li>
<li><p>校验拼图完成<br>自己想的一个办法，将正确的索引连起来组成一个字符串，render图片的时候，为每张图分配一个id，每次运动完成，拼接当前所有图片的id组成一个字符串和正确索引的字符串相比较，若相等，则拼图完成。</p>
</li>
<li><p>最终选择思路二小试一把，为了方便，还引用了jquery<br>记录下用到的拖拽方法：</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">$drag[l].ondragstart = <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>) </span>&#123;</div><div class="line">    <span class="comment">/*拖拽开始*/</span></div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;;</div><div class="line">$drag[l].ondrag=<span class="function"><span class="keyword">function</span>(<span class="params">ev</span>)</span>&#123;</div><div class="line">    <span class="comment">/*console.log("move%o",ev);*/</span></div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line"></div><div class="line">&#125;;</div><div class="line">$drag[l].ondragend = <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>) </span>&#123;</div><div class="line">    <span class="comment">/*拖拽结束*/</span></div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"></div><div class="line">$drag[l].ondragover = <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>) </span>&#123;</div><div class="line">    <span class="comment">/*拖拽元素在目标元素头上移动的时候*/</span></div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">$drag[l].ondragenter = <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>) </span>&#123;</div><div class="line">    <span class="comment">/*拖拽元素进入目标元素头上的时候*/</span></div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;;</div><div class="line">$drag[l].ondrop = <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>) </span>&#123;</div><div class="line">    <span class="comment">/*拖拽元素进入目标元素头上，同时鼠标松开的时候*/</span></div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="移动端的尝试"><a href="#移动端的尝试" class="headerlink" title="移动端的尝试"></a>移动端的尝试</h3><blockquote>
<p>有了pc端的尝试，一些逻辑方面的已经理清，正式着手移动端  </p>
</blockquote>
<ul>
<li><p>拖拽问题<br>主要用到了移动端的touch事件，toustart，touchmove，touchend这三个事件</p>
</li>
<li><p>解决图片切割问题<br>和pc端用到的方法一样</p>
</li>
<li><p>校验拼图完成<br>后来想想pc端用的方法太繁琐了，后来改进了下，大致思路一样，稍后代码贴出</p>
</li>
</ul>
<h6 id="图片切割问题"><a href="#图片切割问题" class="headerlink" title="图片切割问题"></a>图片切割问题</h6><blockquote>
<p>根据参数numbs确认要切割的数量，求出每个小图在原图片上的坐标，用canvas切割出来放到数组里  </p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">for(var i=0;i&lt;numbs*numbs;i++)&#123;</div><div class="line">	var row=Math.floor(i/numbs);//行</div><div class="line">	var col=i%numbs;//列</div><div class="line">	canvas.width=nwidth;</div><div class="line">	canvas.height=nheight;</div><div class="line">	var ctx=canvas.getContext(&quot;2d&quot;);</div><div class="line">	ctx.drawImage(img,col*nwidth,row*nheight,nwidth,nheight,0,0,nwidth,nheight);</div><div class="line">	var image = canvas.toDataURL();</div><div class="line">	arr.push(image);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h6 id="打乱图片顺序，遍历存放图片的数组将key放到一个新的数组里，同时创建一个新的对象存放数组的key，value，对key数组打乱顺序，最后取出res-keys-i"><a href="#打乱图片顺序，遍历存放图片的数组将key放到一个新的数组里，同时创建一个新的对象存放数组的key，value，对key数组打乱顺序，最后取出res-keys-i" class="headerlink" title="打乱图片顺序，遍历存放图片的数组将key放到一个新的数组里，同时创建一个新的对象存放数组的key，value，对key数组打乱顺序，最后取出res[keys[i]]"></a>打乱图片顺序，遍历存放图片的数组将key放到一个新的数组里，同时创建一个新的对象存放数组的key，value，对key数组打乱顺序，最后取出res[keys[i]]</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">var res=&#123;&#125;,keys=[];</div><div class="line">for(var i=0;i&lt;arr.length;i++)&#123;</div><div class="line">	res[i]=arr[i];</div><div class="line">	keys.push(i);</div><div class="line">&#125;</div><div class="line">this.list=res;</div><div class="line">keys.sort(function()&#123;</div><div class="line">	return Math.random()-0.5;</div><div class="line">&#125;);</div><div class="line">return keys;</div></pre></td></tr></table></figure>
<h6 id="取打乱的数组部分"><a href="#取打乱的数组部分" class="headerlink" title="取打乱的数组部分"></a>取打乱的数组部分</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">var numbs=this.numbs;</div><div class="line">var keys=this.getlist(arr);</div><div class="line">for(var i=0;i&lt;keys.length;i++)&#123;</div><div class="line">	var row=Math.floor(i/numbs);//行</div><div class="line">	var col=i%numbs;//列</div><div class="line">	var $li=this.creatLi(nwidth,nheight,row,col,this.list[keys[i]]);</div><div class="line">	$li.idx=keys[i];//打乱后的索引</div><div class="line">	$li.index=i;//默认的索引</div><div class="line">	$ul.appendChild($li);</div><div class="line"></div><div class="line">	bind($li, &quot;touchstart&quot;, this._start.bind(this));</div><div class="line">	bind($li, &quot;touchmove&quot;, this._move.bind(this));</div><div class="line">	bind($li, &quot;touchend&quot;, this._end.bind(this));	</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h6 id="图片跟随手指移动-先算出手指据当前图片的距离tempX、tempY备用"><a href="#图片跟随手指移动-先算出手指据当前图片的距离tempX、tempY备用" class="headerlink" title="图片跟随手指移动  先算出手指据当前图片的距离tempX、tempY备用"></a>图片跟随手指移动  先算出手指据当前图片的距离tempX、tempY备用</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">_start:function(evt)&#123;</div><div class="line"></div><div class="line">	this.startTime = new Date().getTime();</div><div class="line">	this._startX=evt.touches[0].pageX;</div><div class="line">	this._startY=evt.touches[0].pageY;</div><div class="line"></div><div class="line">	this.tochEvent=evt.target.parentElement;</div><div class="line">	this.tochEvent.classList.remove(&quot;trans&quot;);</div><div class="line"></div><div class="line">	this.resetIndex(this.tochEvent);</div><div class="line"></div><div class="line">	this.tempX=this._startX-this.tochEvent.offsetLeft;//手指据当前图片的左距离</div><div class="line">	this.tempY=this._startY-this.tochEvent.offsetTop;//手指据当前图片的顶距离</div><div class="line"></div><div class="line">	console.log(&quot;evt%o&quot;,evt);</div><div class="line">	console.dir(this.tochEvent);</div><div class="line">&#125;</div><div class="line">```  </div><div class="line"></div><div class="line">###### touchmove 手指移动触发</div><div class="line"></div><div class="line">```javascripe</div><div class="line">_move:function(evt)&#123;</div><div class="line">	var _moveX=evt.touches[0].pageX;</div><div class="line">	var _moveY=evt.touches[0].pageY;	</div><div class="line">	var x=_moveX-this.tempX;//手指距屏幕左边距的距离减去手指距当前图片的距离</div><div class="line">	var y=_moveY-this.tempY;</div><div class="line">	...</div><div class="line">	this.tochEvent.style.left=x+&quot;px&quot;;</div><div class="line">	this.tochEvent.style.top=y+&quot;px&quot;;</div><div class="line">	evt.preventDefault();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h6 id="勾股定理判断与当前元素最近的目标"><a href="#勾股定理判断与当前元素最近的目标" class="headerlink" title="勾股定理判断与当前元素最近的目标"></a>勾股定理判断与当前元素最近的目标</h6><pre><code class="javascripe">
getDistance:function(obj1,obj2){
    var a=(obj1.offsetLeft+obj1.offsetWidth/2)-(obj2.offsetLeft+obj2.offsetWidth/2);
    var b=(obj1.offsetTop+obj1.offsetHeight/2)-(obj2.offsetTop+obj2.offsetHeight/2);
    return Math.ceil(Math.sqrt(a * a + b * b));
},
</code></pre>
<blockquote>
<p>这里用了个蠢办法  遍历所有dom 算与当前dom的中心点的距离，找出最近距离，并输出，以前看到过别人用了更好的方法来碰撞检测 好像是用圆，忘了。。数学没学好。。  </p>
</blockquote>
<pre><code class="javascripe">getshortdistance:function(el){
    var list=this.lis,res=[];
    for(var i=0;i&lt;list.length;i++){
        if(el!=list[i]){
            var r=this.getDistance(el,list[i]);
            var obj={dom:list[i],r:r};
            if(res.length==0){//没有值就插入
                res.push(obj);
            }
            if(r&lt;res[0].r){//发现比第一个值还短的距离 就删除前一个值并插入当前值
                res.splice(0,1,obj);
            }
        }
    }
    return res[0];

},
</code></pre>
<h6 id="松开手指替换两张图片的src及编号"><a href="#松开手指替换两张图片的src及编号" class="headerlink" title="松开手指替换两张图片的src及编号"></a>松开手指替换两张图片的src及编号</h6><pre><code class="javascripe">oldImg.src=this.list[newEl.idx];
newImg.src=this.list[oldEl.idx];
oldEl.idx=newEl.idx;
newEl.idx=temp;
//位置复原
oldEl.classList.add(&quot;trans&quot;);
oldEl.style.left=oldEl.positionList.x+&quot;px&quot;;
oldEl.style.top=oldEl.positionList.y+&quot;px&quot;;
</code></pre>
<h6 id="校验是否拼图完成，这里的检测主要是对比打乱的索引idx和正确的索引是否相等，若全部相等-则拼图完成"><a href="#校验是否拼图完成，这里的检测主要是对比打乱的索引idx和正确的索引是否相等，若全部相等-则拼图完成" class="headerlink" title="校验是否拼图完成，这里的检测主要是对比打乱的索引idx和正确的索引是否相等，若全部相等 则拼图完成"></a>校验是否拼图完成，这里的检测主要是对比打乱的索引idx和正确的索引是否相等，若全部相等 则拼图完成</h6><pre><code class="javascripe">var list=[].slice.call(this.lis);//将dom数组转化为数组
var flag=list.every(function(item,index,array){
    return item.idx==item.index;
});
if(flag){
    this.pass &amp;&amp; this.pass(this.startIndex);
}
</code></pre>
<h6 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h6><p>写完后发现没啥应用场景，就当练练手，写着玩玩了。。手机体验扫描下述二维码</p>
<p><img src="http://lucc.ml/demos/move/images/cc.png" alt="image"></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;以前一直想写些自己感兴趣的东西玩，一直没动笔，还记得去年也做过小游戏方面的工作，当时基本上都是在网上找现成的改改就OK了，还记得以前想找个移动端的拼图找了好久都没找到，懊悔不已，最近研究了下，写个玩玩。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://lucc.ml/demos/move/move.html&quot;&gt;demo地址体验&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;PC端的尝试&quot;&gt;&lt;a href=&quot;#PC端的尝试&quot; class=&quot;headerlink&quot; title=&quot;PC端的尝试&quot;&gt;&lt;/a&gt;PC端的尝试&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;解决拖拽问题&lt;br&gt;网上搜了下解决方案：&lt;br&gt;&lt;strong&gt;思路一&lt;/strong&gt;：鼠标在页面上移动时不断获取鼠标位置，并将鼠标的位置信息赋值给随鼠标移动的标签，对标签进行定位；这样鼠标就能进行拖动标签了。&lt;br&gt;&lt;strong&gt;思路二&lt;/strong&gt;：HTML5新属性，可拖放属性draggable，支持draggable属性的浏览器有IE10+，Firfox4+，Safari5+，Chrome，另外为了让Firfox支持可拖放属性，还必须添加一个ondragstart事件处理程序，并在dataTransfer对象中保存一些信息。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="js" scheme="http://lucc.ml/categories/js/"/>
    
    
      <category term="js" scheme="http://lucc.ml/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>js对象法数组去重</title>
    <link href="http://lucc.ml/2016/08/29/js%E5%AF%B9%E8%B1%A1%E6%B3%95%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D/"/>
    <id>http://lucc.ml/2016/08/29/js对象法数组去重/</id>
    <published>2016-08-29T02:33:47.000Z</published>
    <updated>2016-08-29T03:04:18.606Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>前两天在人家的底层代码中发现一个好用的数组去重方法，简单记录下。</p>
</blockquote>
<h3 id="一般去重方式"><a href="#一般去重方式" class="headerlink" title="一般去重方式"></a>一般去重方式</h3><p>利用一个临时数组保存，然后循环原数组，如果当前数组的第i已经保存进了临时数组，那么跳过，代码如下：</p>
<a id="more"></a>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Array</span>.prototype.unique1 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">var</span> n = []; <span class="comment">//一个新的临时数组</span></div><div class="line">	<span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.length; i++) <span class="comment">//遍历当前数组</span></div><div class="line">	&#123;</div><div class="line">		<span class="comment">//如果当前数组的第i已经保存进了临时数组，那么跳过，</span></div><div class="line">		<span class="comment">//否则把当前项push到临时数组里面</span></div><div class="line">		<span class="keyword">if</span> (n.indexOf(<span class="keyword">this</span>[i]) == <span class="number">-1</span>) n.push(<span class="keyword">this</span>[i]);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> n;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="利用js的对象特性去重"><a href="#利用js的对象特性去重" class="headerlink" title="利用js的对象特性去重"></a>利用js的对象特性去重</h3><blockquote>
<p>一般版</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Array</span>.prototype.unique = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)  </span></div><div class="line">&#123;  </div><div class="line">    	<span class="keyword">var</span> obj=&#123;&#125;,res=[];</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>,j=<span class="keyword">this</span>.length;i&lt;j;i++)&#123;</div><div class="line">		<span class="keyword">if</span>(!obj[arr[i]])&#123;</div><div class="line">			obj[arr[i]]=<span class="literal">true</span>;</div><div class="line">			res.push(arr[i]);</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> res;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>js的对象会将相同的属性覆盖，从而达到去重</p>
<blockquote>
<p>精细版</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Array</span>.prototype.unique = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)  </span></div><div class="line">&#123;  </div><div class="line">    <span class="keyword">var</span> n = &#123;&#125;, r = [], len = <span class="keyword">this</span>.length, val, type;  </div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.length; i++) &#123;  </div><div class="line">        val = <span class="keyword">this</span>[i];  </div><div class="line">        type = <span class="keyword">typeof</span> val;  </div><div class="line">        <span class="keyword">if</span> (!n[val]) &#123;  </div><div class="line">            n[val] = [type];  </div><div class="line">            r.push(val);  </div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (n[val].indexOf(type) &lt; <span class="number">0</span>) &#123;  </div><div class="line">            n[val].push(type);  </div><div class="line">            r.push(val);  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">return</span> r;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里写的相对上一种较为复杂 主要是考虑到特殊情况 ，1, ‘1’等不同类型的值会对应到同一个下标而被去重</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;前两天在人家的底层代码中发现一个好用的数组去重方法，简单记录下。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;一般去重方式&quot;&gt;&lt;a href=&quot;#一般去重方式&quot; class=&quot;headerlink&quot; title=&quot;一般去重方式&quot;&gt;&lt;/a&gt;一般去重方式&lt;/h3&gt;&lt;p&gt;利用一个临时数组保存，然后循环原数组，如果当前数组的第i已经保存进了临时数组，那么跳过，代码如下：&lt;/p&gt;
    
    </summary>
    
      <category term="js" scheme="http://lucc.ml/categories/js/"/>
    
    
      <category term="js" scheme="http://lucc.ml/tags/js/"/>
    
      <category term="数组" scheme="http://lucc.ml/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>安装hexo中遇到的坑</title>
    <link href="http://lucc.ml/2016/08/08/%E5%AE%89%E8%A3%85hexo%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/"/>
    <id>http://lucc.ml/2016/08/08/安装hexo中遇到的坑/</id>
    <published>2016-08-08T08:13:59.000Z</published>
    <updated>2016-08-29T02:21:14.183Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>最近开始研究hexo,记录下安装到运行之中遇到的坑。</p>
</blockquote>
<h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><p>使用nodejs命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>安装好后，发现什么命令都运行不了。</p>
<p>解决办法：<br>运行npm install hexo-deployer-git –save</p>
<h2 id="配置hexo主题"><a href="#配置hexo主题" class="headerlink" title="配置hexo主题"></a>配置hexo主题</h2><p>说到配置，花了我一下午的时间配置，最终的效果就是目前的这个博客。进入正题，分主配置和主题文件配置</p>
<h3 id="主配置文件-config-yml"><a href="#主配置文件-config-yml" class="headerlink" title="主配置文件_config.yml"></a>主配置文件_config.yml</h3><blockquote>
<p>设置博客的主要信息</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># Site</div><div class="line">title: lucc&apos;s notes</div><div class="line">subtitle: 路曼曼其修远兮，吾将上下而求索</div><div class="line">description: 探索前端的各种坑</div><div class="line">keywords: &quot;jovey,Nodejs,react,redux,coffeescript,前端,js,jquery,javascript,html5,开发者,程序猿,极客,编程,代码,开源,IT网站,Developer,Programmer,Coder,html,css,css3,用户体验,Hexo,next...&quot;</div><div class="line">author: 陆钏钏</div><div class="line">language: zh-Hans</div><div class="line">timezone:</div></pre></td></tr></table></figure>
<blockquote>
<p>设置RSS订阅</p>
</blockquote>
<p>需要先安转<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install --save hexo-generator-feed</div></pre></td></tr></table></figure></p>
<p>然后设置配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">plugins: hexo-generate-feed</div><div class="line">## Themes: https://hexo.io/themes/</div><div class="line">theme: hexo</div></pre></td></tr></table></figure></p>
<p>还需要在主题配置文件里添加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rss: /atom.xml</div></pre></td></tr></table></figure></p>
<blockquote>
<p>设置git</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy: </div><div class="line">  type: git</div><div class="line">  repository: https://github.com/luchuanc/Test.git</div><div class="line">  branch: gh-pages</div></pre></td></tr></table></figure>
<h3 id="主题配置文件，这里用到的是next主题"><a href="#主题配置文件，这里用到的是next主题" class="headerlink" title="主题配置文件，这里用到的是next主题"></a>主题配置文件，这里用到的是next主题</h3><p>安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/iissnan/hexo-theme-next themes/next</div></pre></td></tr></table></figure></p>
<p>配置</p>
<blockquote>
<p>菜单配置</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">menu:</div><div class="line"> home: /</div><div class="line"> categories: /categories</div><div class="line"> #about: /about</div><div class="line"> archives: /archives</div><div class="line"> tags: /tags</div><div class="line"> #commonweal: /404.html</div></pre></td></tr></table></figure>
<blockquote>
<p>这里用到分类注意需要创建对应的目录，使用</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo new page &quot;categories&quot;</div></pre></td></tr></table></figure>
<blockquote>
<p>手动去source文件夹新建文件夹也行  不过要自行配置index.md文件，该文件配置如下</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">title: 分类</div><div class="line">date: 2015-09-16 15:23:03</div><div class="line">type: &quot;categories&quot;</div><div class="line">comments: false</div></pre></td></tr></table></figure>
<blockquote>
<p>下面是主题的一些个性化配置</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">avatar: http://img.woyaogexing.com/2016/07/28/9d2d4a154c0692f3!200x200.jpg #设置头像</div><div class="line"># Swiftype Search API Key</div><div class="line">swiftype_key:  #搜索</div><div class="line"></div><div class="line"># Baidu Analytics ID</div><div class="line">baidu_analytics:  #百度统计id</div><div class="line"></div><div class="line"># Duoshuo ShortName</div><div class="line">duoshuo_shortname:  #多说评论</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;最近开始研究hexo,记录下安装到运行之中遇到的坑。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;安装hexo&quot;&gt;&lt;a href=&quot;#安装hexo&quot; class=&quot;headerlink&quot; title=&quot;安装hexo&quot;&gt;&lt;/a&gt;安装hexo&lt;/h2&gt;&lt;p&gt;使用nodejs命令&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;npm install hexo&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Git" scheme="http://lucc.ml/categories/Git/"/>
    
    
      <category term="git" scheme="http://lucc.ml/tags/git/"/>
    
      <category term="hexo" scheme="http://lucc.ml/tags/hexo/"/>
    
  </entry>
  
</feed>
